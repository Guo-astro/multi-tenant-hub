export const SystemProviderCfnOutputs = {
  serverlessSaaSSettingsTableName: "serverlessSaaSSettingsTableName",
  serverlessSaaSSettingsTableArn: "serverlessSaaSSettingsTableArn",
  tenantStackMappingTableName: "tenantStackMappingTableName",
  tenantStackMappingTableArn: "tenantStackMappingTableArn",
  tenantDetailsTableName: "tenantDetailsTableName",
  tenantDetailsTableArn: "tenantDetailsTableArn",
  tenantUserMappingTableName: "tenantUserMappingTableName",
  tenantUserMappingTableArn: "tenantUserMappingTableArn",
  adminAppBucketName: "adminAppBucketName",
  adminAppBucketArn: "adminAppBucketArn",
  tenantAppBucketName: "tenantAppBucketName",
  tenantAppBucketArn: "tenantAppBucketArn",
  onBoardingAppBucketName: "onBoardingAppBucketName",
  restApiId: "restApiId",
  restApiIdStageName: "restApiIdStageName",
  cognitoOperationUsersUserPoolId: "operationUsersUserPoolId",
  cognitoOperationUsersUserPoolClientId: "operationUsersUserPoolClientId",
  stackRegion: "stackRegion",
  adminCFDistributionId: "adminCFDistributionId",
  tenantAppCFDistributionId: "tenantAppCFDistributionId",
  onBoardingAppCFDistributionId: "onBoardingAppCFDistributionId",
  usagePlanBasicTierId: "usagePlanBasicTierId",
  usagePlanStandardTierId: "usagePlanStandardTierId",
  usagePlanPremiumTierId: "usagePlanPremiumTierId",
  usagePlanPlatinumTierId: "usagePlanPlatinumTierId",
  usagePlanSystemAdminId: "usagePlanSystemAdminId",
  sharedServicesAuthorizerFunctionCfnOutput:
    "sharedServicesAuthorizerFunctionCfnOutput",
  businessServicesAuthorizerFunctionCfnOutput:
    "businessServicesAuthorizerFunctionCfnOutput",
};

export const SystemProviderInfraStackNameDict = {
  CognitoOperationUsersUserPool: "operationUsersUserPool",
  CognitoOperationUsersUserPoolClient: "operationUsersUserPoolClient",
  /***Domain cannot contain reserved word: cognito */
  CognitoOperationUsersUserPoolDomain: "operationUsersUserPoolDomain",
  CognitoAdminUserGroup: "AdminUserGroup",
  CognitoAdminUser: "AdminUser",
  CognitoAddUserToGroup: "AddUserToGroup",
  PooledTenantUserPool: "PooledTenantUserPool",
  MultitenantCloudTrail: "MultitenantCloudTrail",
  systemProviderInfraStack: "systemProviderInfraStack",
  webHostingStack: "webHostingStack",
  dataStack: "dataStack",
  authStack: "authStack",
  functionStack: "funcStack",
  apigwStack: "apigwStack",
  customResource: "customResource",
  apigwPermissonStack: "apigwPermissonStack",
  originAccessIdentity: "originAccessIdentity",
  adminAppBucketId: "adminAppBucketId",
  adminAppCachePolicyId: "adminAppCachePolicyId",
  adminAppDistributionId: "adminAppDistributionId",
  landingAppBucketId: "landingAppBucketId",
  landingAppCachePolicyId: "landingAppCachePolicyId",
  landingAppDistributionId: "landingAppDistributionId",
  tenantAppBucketId: "tenantAppBucketId",
  tenantAppCachePolicyId: "tenantAppCachePolicyId",
  tenantAppDistributionId: "tenantAppDistributionId",
  apigwPermission: "apigwPermission",
  systemProviderApiGatewayAccessLogs: "systemProviderApiGatewayAccessLogs",
  systemProviderApiGatewayCloudWatchLogRole:
    "systemProviderApiGatewayCloudWatchLogRole",
  systemProviderApiGatewayCloudWatchLogRoleArn:
    "systemProviderApiGatewayCloudWatchLogRoleArn",
  systemProviderApiGW: "systemProviderApiGW",
  APIGatewayApiKeySystemAdminProd: "APIGatewayApiKeySystemAdminProd",
  ServerlessSaaSSysAdminApiKeyProd: "Serverless-SaaS-SysAdmin-ApiKey-Prod",
  APIGatewayApiKeyPlatinumTierProd: "APIGatewayApiKeyPlatinumTierProd",
  ServerlessSaaSPlatinumTierApiKeyProd:
    "Serverless-SaaS-PlatinumTier-ApiKey-Prod",
  APIGatewayApiKeyPremiumTierProd: "APIGatewayApiKeyPremiumTierProd",
  ServerlessSaaSPremiumTierApiKeyProd:
    "Serverless-SaaS-PremiumTier-ApiKey-Prod",
  APIGatewayApiKeyStandardTierProd: "APIGatewayApiKeyStandardTierProd",
  ServerlessSaaSStandardTierApiKeyProd:
    "Serverless-SaaS-StandardTier-ApiKey-Prod",
  APIGatewayApiKeyBasicTierProd: "APIGatewayApiKeyBasicTierProd",
  ServerlessSaaSBasicTierApiKeyProd: "Serverless-SaaS-BasicTier-ApiKey-Prod",
  UsagePlanPremiumTier: "UsagePlanPremiumTier",
  UsagePlanPlatinumTier: "UsagePlanPlatinumTier",
  UsagePlanStandardTier: "UsagePlanStandardTier",
  UsagePlanBasicTier: "UsagePlanBasicTier",
  UsagePlanSystemAdmin: "UsagePlanSystemAdmin",
  TokenAuthorizer: "TokenAuthorizer",
  Authorizer: "Authorizer",
  UpdateSettingsTableFunction: "UpdateSettingsTableFunction",
  UpdateSettingsTableProvider: "UpdateSettingsTableProvider",
  UpdateSettingsTableCustomResource: "UpdateSettingsTableCustomResource",
  UpdateTenantStackMapFunction: "UpdateTenantStackMapFunction",
  UpdateTenantStackMapProvider: "UpdateTenantStackMapProvider",
  updateTenantStackMapCustomResource: "updateTenantStackMapCustomResource",
  MyRepository: "MyRepository",
  AuthorizerExecutionRole: "AuthorizerExecutionRole",
  TenantUserPoolLambdaExecutionRole: "TenantUserPoolLambdaExecutionRole",
  TenantUserPoolLambdaExecutionPolicy: "TenantUserPoolLambdaExecutionPolicy",
  CreateUserLambdaExecutionRole: "CreateUserLambdaExecutionRole",
  CreateUserLambdaExecutionPolicy: "CreateUserLambdaExecutionPolicy",
  TenantManagementLambdaExecutionRole: "TenantManagementLambdaExecutionRole",
  TenantManagementLambdaExecutionPolicy:
    "TenantManagementLambdaExecutionPolicy",
  RegisterTenantLambdaExecutionRole: "RegisterTenantLambdaExecutionRole",
  ProvisionTenantLambdaExecutionRole: "ProvisionTenantLambdaExecutionRole",
  ProvisionTenantLambdaExecutionPolicy: "ProvisionTenantLambdaExecutionPolicy",
  DeProvisionTenantLambdaExecutionRole: "DeProvisionTenantLambdaExecutionRole",
  DeProvisionTenantLambdaExecutionPolicy:
    "DeProvisionTenantLambdaExecutionPolicy",
  UpdateSettingsTableLambdaExecutionRole:
    "UpdateSettingsTableLambdaExecutionRole",
  UpdateSettingsTableLambdaExecutionPolicy:
    "UpdateSettingsTableLambdaExecutionPolicy",
  UpdateTenantStackMapTableLambdaExecutionRole:
    "UpdateTenantStackMapTableLambdaExecutionRole",
  UpdateTenantStackMapTableLambdaExecutionPolicy:
    "UpdateTenantStackMapTableLambdaExecutionPolicy",

  sharedServicesAuthorizerFunction: "sharedServicesAuthorizerFunction",
  businessServicesAuthorizerFunction: "businessServicesAuthorizerFunction",

  createTenantAdminUserFunction: "createTenantAdminUserFunction",
  createUserFunction: "createUserFunction",
  registerTenantFunction: "registerTenantFunction",
  provisionTenantFunction: "provisionTenantFunction",
  deProvisionTenantFunction: "deProvisionTenantFunction",
  updateSettingsTableFunction: "updateSettingsTableFunction",
  updateTenantStackMapTableFunction: "updateTenantStackMapTableFunction",
  tenantUserPoolLambdaFunction: "tenantUserPoolLambdaFunction",
  tenantManagementLambdaFunction: "tenantManagementLambdaFunction",
  updateSettingsTableLambdaFunction: "updateSettingsTableLambdaFunction",
  updateTenantStackMapTableLambdaFunction:
    "updateTenantStackMapTableLambdaFunction",
  createTenantNormalUserFunction: "createTenantNormalUserFunction",
  updateTenantNormalUserFunction: "updateTenantNormalUserFunction",
  disableTenantNormalUserFunction: "disableTenantNormalUserFunction",
  disableUsersByTenantFunction: "disableUsersByTenantFunction",
  enableUsersByTenantFunction: "enableUsersByTenantFunction",
  disableUserFunction: "disableUserFunction",
  enableUserFunction: "enableUserFunction",
  disableTenantAdminUserFunction: "disableTenantAdminUserFunction",
  getUserFunction: "getUserFunction",
  getUsersFunction: "getUsersFunction",
  createTenantFunction: "createTenantFunction",
  activateTenantFunction: "activateTenantFunction",
  getTenantFunction: "getTenantFunction",
  deactivateTenantFunction: "deactivateTenantFunction",
  updateTenantFunction: "updateTenantFunction",
  getTenantsFunction: "getTenantsFunction",
  loadTenantConfigFunction: "loadTenantConfigFunction",
  lambdaImageTag: "lambdaImageTag",
};

export const TenantSystemNameDict = {
  apigwPermission: "apigwPermission",
  updateUsagePlanFunction: "updateUsagePlanFunction",
  associateUsagePlanWithTenantApiProvider:
    "associateUsagePlanWithTenantApiProvider",
  associateUsagePlanWithTenantApiCustomResource:
    "associateUsagePlanWithTenantApiCustomResource",
  updateTenantApiGatewayUrlFunction: "updateTenantApiGatewayUrlFunction",
  updateTenantApiGatewayUrlProvider: "updateTenantApiGatewayUrlProvider",
  updateTenantApiGatewayUrlCustomResource:
    "updateTenantApiGatewayUrlCustomResource",
  apiGatewayAccessLogs: "apiGatewayAccessLogs",
  apigw: "apigw",
  authorizer: "authorizer",
  tokenAuthorizer: "tokenAuthorizer",
  apigwUrl: "apigwUrl",
  apigwPermissonStack: "apigwPermissonStack",
  customResource: "customResource",
  funcStack: "funcStack",
  apigwStack: "apigwStack",
  dataStack: "dataStack",
  tenanIdCfnParam: "tenanIdCfnParam",
  systemSettingsTableArnCfnParam: "systemSettingsTableArnCfnParam",
  authorizerFunctionArnCfnParam: "authorizerFunctionArnCfnParam",
  systemProviderSettingsTableNameCfnParam:
    "systemProviderSettingsTableNameCfnParam",
  tenantDetailsTableNameCfnParam: "tenantDetailsTableNameCfnParam",
  tenantDetailsTableArnCfnParam: "tenantDetailsTableArnCfnParam",
  usagePlanBasicTierIdCfnParam: "usagePlanBasicTierIdCfnParam",
  usagePlanStandardTierIdCfnParam: "usagePlanStandardTierIdCfnParam",
  usagePlanPremiumTierIdCfnParam: "usagePlanPremiumTierIdCfnParam",
  usagePlanPlatinumTierIdCfnParam: "usagePlanPlatinumTierIdCfnParam",
  LambdaInsightsExtensionLayer: "LambdaInsightsExtensionLayer",

  customTenantLambdaLayer: "customTenantLambdaLayer",
  productFunctionExecutionRole: "productFunctionExecutionRole",
  productFunctionExecutionPolicy: "productFunctionExecutionPolicy",
  GetProductFunction: "GetProductFunction",
  GetProductsFunction: "GetProductsFunction",
  CreateProductFunction: "CreateProductFunction",
  UpdateProductFunction: "UpdateProductFunction",
  DeleteProductFunction: "DeleteProductFunction",
  OrderFunctionExecutionRole: "OrderFunctionExecutionRole",
  OrderFunctionExecutionPolicy: "OrderFunctionExecutionPolicy",
  GetOrderFunction: "GetOrderFunction",
  GetOrdersFunction: "GetOrdersFunction",
  CreateOrderFunction: "CreateOrderFunction",
  UpdateOrderFunction: "UpdateOrderFunction",
  DeleteOrderFunction: "DeleteOrderFunction",
  UpdateUsagePlanLambdaExecutionRole: "UpdateUsagePlanLambdaExecutionRole",
  UpdateUsagePlanLambdaExecutionPolicy: "UpdateUsagePlanLambdaExecutionPolicy",
  UpdateUsagePlanFunction: "UpdateUsagePlanFunction",
  updateTenantApiGatewayUrlLambdaExecutionPolicy:
    "updateTenantApiGatewayUrlLambdaExecutionPolicy",
  orderFunctionExecutionRolePolicy: "orderFunctionExecutionRolePolicy",
  productFunctionExecutionRolePolicy: "productFunctionExecutionRolePolicy",
  updateTenantApiGatewayUrlLambdaExecutionRole:
    "updateTenantApiGatewayUrlLambdaExecutionRole",
  tenantProviderInfraStackName: "tenantProviderInfraStackName",
  artifactsBucketId: "artifactsBucketId",
};

export const SystemProviderProvisioningPipelineNameDict = {
  systemProviderProvisiongPipelineName: "systemProvisioningPipeline",
};

export const TenantProvisioningPipelineNameDict = {
  tenantProvisiongPipelineName: "tenantProvisiongPipeline",
  artifactsBucketId: "artifactsBucketId",
  tenantProviderInfraStack: "tenantProviderInfraStack",
  powertoolsLayerId: "powertoolsLayerId",
  tenantStackProvisioninglambdaFunction:
    "tenantStackProvisioninglambdaFunction",
  tenantStackProvisioninglambdaFunctionUrl:
    "tenantStackProvisioninglambdaFunctionUrl",
  GitHub_Source: "GitHub_Source",
  MyRole: "MyRole",
  tenantStackBuildAction: "tenantStackBuildAction",
  tenantStackDeployProject: "tenantStackDeployProject",
  tenantStackDeployAction: "tenantStackDeployAction",
  tenantpipeline: "tenantpipeline",
  Source: "Source",
  owner: "Guo-astro",
  repo: "multi-tenant-hub",
  branch: "main",
};

export const SharedCfnOutputs = {
  tenantStackProvisioninglambdaFunctionUrl:
    "tenantStackProvisioninglambdaFunctionUrl",
};
